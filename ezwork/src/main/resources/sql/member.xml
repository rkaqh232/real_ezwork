<?xml version="1.0" encoding="UTF-8" ?>
<!-- SQL 맵퍼 파일은 xml이기 때문에 제일 먼저 xml 선언이 옵니다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 민혁 - 사원조회 -->
<!-- 혜정 - 사원등록 -->

<mapper namespace="Members">
    <!-- 혜정 - 사원등록 -->
    <insert id="insert" parameterType="member">
        insert into member(M_CODE,M_PASS,M_FILE,M_ORIGINAL,M_PART_C,M_LEVEL,
        M_NAME,M_GENDER,M_BIRTH,M_ARMY,M_MARRIAGE,M_MOBILE_TEL,M_EMAIL,M_ADDRESS,
         M_JOIN_DATE,SC_NAME, SC_MAJOR,SC_DEGREE,SC_ADDRESS,SC_GRAD_DAY, 
         LG_NAME, LG_TEST,LG_GRADE,LG_ORGAN,LG_DATE, LI_NAME, LI_ORGAN,LI_DATE,
          M_POSTCODE,M_ADDRESS2)
      values
         ('EMP'||emp_seq.nextval, #{M_PASS}, #{M_FILE, jdbcType=VARCHAR},#{M_ORIGINAL, jdbcType=VARCHAR}, 
         #{M_PART_C}, #{M_LEVEL}, #{M_NAME},
         #{M_GENDER}, #{M_BIRTH}, #{M_ARMY}, #{M_MARRIAGE}, 
         #{M_MOBILE_TEL}, #{M_EMAIL}, #{M_ADDRESS}, TO_DATE(#{M_JOIN_DATE},'YYYY-MM-DD'), 
         #{SC_NAME}, #{SC_MAJOR}, #{SC_DEGREE}, #{SC_ADDRESS}, SYSDATE,
         #{LG_NAME}, #{LG_TEST}, #{LG_GRADE}, #{LG_ORGAN}, #{LG_DATE},
         #{LI_NAME}, #{LI_ORGAN}, #{LI_DATE},
         #{M_POSTCODE}, #{M_ADDRESS2}
         
         )   
    </insert> 





	<!-- 혜정 - 사원코드 체크 -->
	<select id="idcheck" resultType="member" parameterType="String">
		select *
		from member where M_CODE = #{M_CODE}
	</select>




	<select id="searchcount" parameterType="map" resultType="int">
		select count(*) from member where M_CODE != 'admin'
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='M_CODE'">M_CODE</when>
				<when test="search_field=='M_PART_C'">M_PART_C</when>
				<when test="search_field=='M_NAME'">M_NAME</when>
				<when test="search_field=='M_LEVEL'">M_LEVEL</when>
			</choose>
			like #{search_word}
		</if>
	</select>
	
	
	 <!--  혜정 - 정보 업데이트 --> 
    <update id="update" parameterType="member">
    	update member
    	set	 name = #{name}, age = #{age},
    	 	 gender = #{gender}, email=#{email}
    	where id=#{id}
 	</update>



	<select id="getSearchList" parameterType="map"
		resultType="member">
		select *
		from ( select rownum rnum, b.*
		from (select * from member where
		M_CODE != 'admin'
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='M_CODE'">M_CODE</when>
				<when test="search_field=='M_PART_C'">M_PART_C</when>
				<when test="search_field=='M_NAME'">M_NAME</when>
				<when test="search_field=='M_LEVEL'">M_LEVEL</when>
			</choose>
			like #{search_word}
		</if>
		order by M_CODE
		)b
		)
		where rnum &gt; = #{start} and rnum &lt; = #{end}
	</select>

	<select id="EmpCheck" resultType="member" parameterType="String">
		select *
		from member where M_CODE = #{M_CODE}
	</select>

	<update id="updatebookmark" parameterType="map">
		update member
		set
		m_bookmark = #{bookmark}
		where m_code = #{id}
	</update>
</mapper>