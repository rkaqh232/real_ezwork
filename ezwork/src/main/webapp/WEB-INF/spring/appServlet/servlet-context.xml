<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:task="http://www.springframework.org/schema/task"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
   
   
   <context:property-placeholder location="classpath:pro/mailsavefolder.properties"/>
   
   <context:property-placeholder location="classpath:pro/boardsavefolder.properties"/>
   
   <context:property-placeholder location="classpath:pro/apprsavefolder.properties"/>
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <resources mapping="/resources/**" location="/resources/" />

   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/views/" />
      <beans:property name="suffix" value=".jsp" />
   </beans:bean>
   
      <!-- 프로퍼티 파일을 이용해서 값을 주입하는 방법 1. context 네임스페이스의 property-placeholder 태그를 
      추가하고 앞에서 만든 프로퍼티 파일의 위치를 지정한다. 2. Controller에서 @Value를 이용해서 값을 가져온다. @Value 
      애노테이션의 주요 용도는 자바 코드 외부의 리소스나 환경정보에 담긴 값을 사용하도록 지정해주는 데 있다. -->

   <!-- 주기적인 작업이 있을 때 @Scheduled annotation을 사용하면 쉽게 적용할 수 있다. (@Scheduled(fixedDelay=1000) -->
   <tx:annotation-driven proxy-target-class="true"/>

   
   <context:component-scan base-package="com.ez.work" /> 
      
</beans:beans>